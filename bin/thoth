#!/usr/bin/env python
import argparse
import os

from thoth import backends, meta_launcher, launcher, constants, cancel
from thoth import list as _list


def parse_args(args=None):

    # yapf: disable
    parser = argparse.ArgumentParser(description='',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparsers = parser.add_subparsers(required=True, dest='subcommand')


    prelaunch_parser = subparsers.add_parser('prelaunch', prefix_chars='+',
        help='Generate commands based on lists of arguments')
    prelaunch_parser.add_argument('+command', type=str, required=True)
    # TODO: Add help to these args
    prelaunch_parser.add_argument('+jobname', type=str, required=True)
    prelaunch_parser.add_argument('+jobfile', type=str, default=constants.defaultjobfile,
        help='json file to write jobs to. Use when running launch')
    prelaunch_parser.add_argument('+arg', type=str, action='append', nargs='+',
        metavar=('--argname', '[value, ...]'),
        help='Add an argument with zero or more mutually exclusive values')
    prelaunch_parser.add_argument('+tag', type=str, nargs='?', const='tag')
    prelaunch_parser.add_argument('+tag-args', type=str, nargs='+')
    prelaunch_parser.add_argument('+a', '++append', action='store_true', 
        help='Add more jobs to existing jobfile')
    prelaunch_parser.add_argument('+v', '++verbose', action='store_true', help='Verbose output')


    launch_parser = subparsers.add_parser('launch', help='Launch jobs using the specified backend')
    launch_parser.add_argument('--backend', choices=backends.__all__, required=True,
        help='The backend to use for launching jobs')
    launch_parser.add_argument('--jobname', type=str, required=True,
        help='A name for the job')
    launch_parser.add_argument('--jobfile', type=str, default=constants.defaultjobfile,
        help='Path to json file containing dictionary mapping run_ids to commands')
    launch_parser.add_argument('--cpus', type=int, default=1,
        help='Number of CPUs to request')
    launch_parser.add_argument('--gpus', type=int, default=0,
        help='Number of GPUs to request')
    launch_parser.add_argument('--mem', type=int, default=2,
        help='Amount of RAM (in GB) to request per node')
    launch_parser.add_argument('--venv', type=str, default='./venv',
        help='Path to python virtualenv')
    launch_parser.add_argument('--duration', type=str, default='0-01:00:00',
        help='Duration of job (d-hh:mm:ss)')
    launch_parser.add_argument('--tasklist', type=str, default=None,
        help='Comma separated list of task ID ranges to submit (e.g. "18-22:1,26,29,34-49:3,51")')
    launch_parser.add_argument('-max','--maxtasks', type=int, default=-1,
        help='Maximum number of simultaneous tasks')
    launch_parser.add_argument('-y','--dry_run', action='store_true',
        help="Don't actually submit jobs to backend")
    launch_parser.set_defaults(dry_run=False)
    launch_parser.add_argument('--hold_jid', type=str, default=None,
        help='Hold job until the specified jobid or jobid_taskid has finished')
    launch_parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    # TODO use nargs=argparse.REMAINDER to have additional args to qsub/sbatch
    # TODO change verbose to quiet and have it print something by default


    list_parser = subparsers.add_parser('list', help='List commands by job_id and task_id')
    list_parser.add_argument('-j','--jobid', type=str, required=True,
        help='The job ID to list commands for')
    list_parser.add_argument('-t','--tasklist', type=str, default=None,
        help='Comma separated list of task IDs (e.g. "18-22:1,26,29,34-49:1")')


    cancel_parser = subparsers.add_parser('cancel',
        help='Cancel previously submitted jobs/tasks on the specified backend')
    cancel_parser.add_argument('--backend', choices=backends.__all__, required=True,
        help='The backend to use for canceling jobs/tasks')
    cancel_parser.add_argument('-j','--jobid', type=str, required=True,
        help='The job ID to delete tasks from')
    cancel_parser.add_argument('-t','--tasklist', type=str, default=None,
        help='Comma separated list of task IDs (e.g. "18-22:1,26,29,34-49:1")')


    help_parser = subparsers.add_parser('help',
        help='Show usage information for a subcommand')
    help_parser.add_argument('help_command', type=str, nargs='?',
        choices=['prelaunch', 'launch', 'help'],
        help='Get help about a subcommand')
    # yapf: enable

    if args is None:
        args = parser.parse_args()
    else:
        args = parser.parse_args(args)

    return args

if __name__ == '__main__':
    args = parse_args()
    os.makedirs(constants.default_logs_folder, exist_ok=True)
    os.makedirs(constants.default_scripts_folder, exist_ok=True)

    if args.subcommand == 'prelaunch':
        meta_launcher.meta_launch(args)
    elif args.subcommand == 'launch':
        launcher.launch(args)
    elif args.subcommand == 'list':
        _list.list_commands(args)
    elif args.subcommand == 'help':
        if args.help_command == 'prelaunch':
            parse_args(['prelaunch', '+h'])
        elif args.help_command == 'launch':
            parse_args(['launch', '-h'])
        elif args.help_command == 'help':
            parse_args(['help', '--help'])
        elif args.help_command in [None]:
            parse_args(['--help'])
    else:
        raise ValueError("'{}' is not a valid command. See 'thoth --help'.")
